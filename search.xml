<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>django和adminlte笔记</title>
      <link href="/s/django%E5%92%8Cadminlte%E7%AC%94%E8%AE%B0/"/>
      <url>/s/django%E5%92%8Cadminlte%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>django</h1><h2 id="新增环境">新增环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install python3-venv</span><br><span class="line">python3 -m venv django4</span><br><span class="line"><span class="built_in">source</span> django4/bin/active</span><br></pre></td></tr></table></figure><h2 id="安装Django">安装Django</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django  -i http://pypi.douban.com/simple/ --trusted-host=pypi.douban.com/simple </span><br></pre></td></tr></table></figure><h2 id="创建和初始化项目">创建和初始化项目</h2><p>创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure><p>修改settings文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os <span class="comment"># 新增</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>] <span class="comment">#修改</span></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR,<span class="string">&#x27;templates&#x27;</span>)], <span class="comment">#修改</span></span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 以下为修改</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">USE_TZ = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 新增static</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>新增文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 项目目录/templates 项目目录/static</span><br></pre></td></tr></table></figure><h2 id="自定义用户模型">自定义用户模型</h2><p>新建一个app</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp manager</span><br></pre></td></tr></table></figure><p>注册到settings.py中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;manager&#x27;</span>, <span class="comment">#新增</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>修改manager/models.py，根据自己的需要修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> BaseUserManager,AbstractUser</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="comment"># 自定义user，还需要在setting文件中配置AUTH_USER_MODELS</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDB</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    uid = models.UUIDField(primary_key=<span class="literal">True</span>,default=uuid.uuid4)</span><br><span class="line">    username = models.CharField(max_length=<span class="number">15</span>,verbose_name=<span class="string">&quot;用户名&quot;</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">11</span>,verbose_name=<span class="string">&quot;手机号码&quot;</span>, null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    email = models.EmailField(verbose_name=<span class="string">&#x27;邮箱&#x27;</span>, null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    create_time = models.DateTimeField(<span class="string">&#x27;创建时间&#x27;</span>,auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(<span class="string">&#x27;更新时间&#x27;</span>,auto_now=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name = <span class="string">&#x27;用户信息&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure><p>编辑settings.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增自定义用户模型</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;manager.UserDB&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="数据库迁移">数据库迁移</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成迁移文件</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line"><span class="comment">#应用迁移文件</span></span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="创建用户">创建用户</h2><ul class="lvl-0"><li class="lvl-2"><p>管理员用户</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>普通用户进入项目shell</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User(用户数据库，默认为User，如果自定义了这里需要修改)</span><br><span class="line">User.objects.create_user(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;email@example.com&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="站点验证和登录">站点验证和登录</h2><p>除了指定界面，用户访问其他界面时，如果没有登录就跳到登录界面，登录完成后跳转到需要访问的界面比如用户访问：<a href="https://51yunwei.top/system/">https://51yunwei.top/system/</a> ，会跳转为 <a href="https://51yunwei.top/login/?next=/system/%EF%BC%8C%E5%AE%8C%E6%88%90%E7%99%BB%E5%BD%95%E5%90%8E%EF%BC%8C%E8%B7%B3%E8%BD%AC%E5%9B%9Ehttps://51yunwei.top/system/">https://51yunwei.top/login/?next=/system/，完成登录后，跳转回https://51yunwei.top/system/</a><br>此处代码来自运维咖啡吧，通过中间件的方式进行处理</p><ul class="lvl-0"><li class="lvl-2"><p>新建一个目录</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> system/middleware -p</span><br><span class="line"><span class="built_in">cd</span> system/middleware</span><br><span class="line"><span class="built_in">touch</span> __init__.py</span><br><span class="line"><span class="built_in">touch</span> loginrequired.py</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>编辑loginrequired.py文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginRequiredMiddleware</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>): <span class="comment"># 启动django的时候会执行init，用get_resonpse来获取下一个中间件或视图函数的响应</span></span><br><span class="line">        self.get_response = get_response </span><br><span class="line">        self.login_url = settings.LOGIN_URL</span><br><span class="line">        self.open_urls = [self.login_url] + <span class="built_in">getattr</span>(settings, <span class="string">&#x27;OPEN_URLS&#x27;</span>, []) <span class="comment"># 登录界面和OPEN_URLS里面的路径都是开放的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>): <span class="comment"># 每次有请求到达时，Django都会调用这个方法。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.user.is_authenticated <span class="keyword">and</span> request.path_info <span class="keyword">not</span> <span class="keyword">in</span> self.open_urls:</span><br><span class="line">            <span class="keyword">return</span> redirect(self.login_url + <span class="string">&#x27;?next=&#x27;</span> + request.path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.get_response(request) <span class="comment"># 每个中间件都有一个get_response函数，这个函数会返回下一个中间件或视图函数的响应。</span></span><br></pre></td></tr></table></figure><p>OPEN_URLS：不需要验证就能访问到的界面<br>LOGIN_URL：需要验证才能访问到的界面通过在settings中配置变量实现</p><ul class="lvl-0"><li class="lvl-2"><p>编辑settings文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;system.middleware.loginrequired.LoginRequiredMiddleware&#x27;</span>, <span class="comment"># 新增，根据自己的路径进行修改</span></span><br><span class="line">]</span><br><span class="line">&gt; 注意：验证的中间件要放最后面，因为最后一个中间件是第一个执行的。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增全局登录地址</span></span><br><span class="line">LOGIN_URL=<span class="string">&#x27;/login/&#x27;</span></span><br><span class="line">OPEN_URLS=[]</span><br></pre></td></tr></table></figure><h2 id="在登录的函数中拿到next地址，并返回，如下">在登录的函数中拿到next地址，并返回，如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">if</span> request.user.is_authenticated:</span><br><span class="line">            <span class="keyword">return</span> render(request,<span class="string">&#x27;base.html&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="comment"># 判断用户登录</span></span><br><span class="line">        next_path = request.GET.get(<span class="string">&#x27;next&#x27;</span>,<span class="string">&#x27;/&#x27;</span>) <span class="comment"># 虽然是post方法，但还是可以用GET来获取路径的参数，即 ?key=value</span></span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(&#x27;post next====&#x27;,request.POST.get(&#x27;next&#x27;,&#x27;&#x27;),request.POST)</span></span><br><span class="line">        user = authenticate(username=username,password=password)</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            login(request,user)</span><br><span class="line">            request.session[<span class="string">&quot;username&quot;</span>] = username</span><br><span class="line">            request.session.set_expiry(<span class="number">0</span>)  <span class="comment"># 设置session过期时间为一周后</span></span><br><span class="line">            <span class="keyword">return</span> redirect(next_path)</span><br><span class="line">        login_error_message = <span class="string">&#x27;用户名或密码错误&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>,&#123;<span class="string">&#x27;login_error_message&#x27;</span>:login_error_message&#125;)</span><br></pre></td></tr></table></figure><h2 id="返回函数">返回函数</h2><p>一些常见的视图返回函数的导入方式：</p><ol><li class="lvl-3"><p><code>HttpResponse</code>：这是一个Django内置的HTTP响应类，可以直接从<code>django.http</code>模块导入。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p><code>HttpResponseRedirect</code>：这也是一个Django内置的HTTP响应类，可以直接从<code>django.http</code>模块导入。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p><code>render</code>：这是一个用于渲染模板并返回HTTP响应的函数，可以从<code>django.shortcuts</code>模块导入。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p><code>redirect</code>：这是一个用于返回重定向视图的函数，也可以从<code>django.shortcuts</code>模块导入。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p><code>JsonResponse</code>：这是一个用于返回JSON格式HTTP响应的函数，可以从<code>django.http</code>模块导入。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p><code>Response</code>：这是Django REST Framework中的一个函数，用于返回HTTP响应，需要从<code>rest_framework.response</code>模块导入。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br></pre></td></tr></table></figure><h2 id="设置url">设置url</h2><p>在项目根urls.py中配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include <span class="comment"># 新增include</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;manager.urls&#x27;</span>)), <span class="comment"># 新增，app名称.urls</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><a href="http://xn--appurls-qw3kg19de2rt2a417co16c.py">在app目录下新建urls.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.IndexView),</span><br><span class="line">    path(<span class="string">&#x27;user/&#x27;</span>,views.UserManager.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>,views.LoginView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;user/&lt;uuid:uid&gt;/&#x27;</span>,views.UserDetail),</span><br><span class="line">    path(<span class="string">&#x27;logout/&#x27;</span>,views.LogOut),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="使用url模板标签生成路径">使用url模板标签生成路径</h2><ul class="lvl-0"><li class="lvl-2"><p>在url中配置name</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.IndexView),</span><br><span class="line">    path(<span class="string">&#x27;user/&#x27;</span>,views.UserManager.as_view(),name=<span class="string">&#x27;userlist&#x27;</span>), <span class="comment"># 配置name</span></span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>,views.LoginView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;user/&lt;uuid:uid&gt;/&#x27;</span>,views.UserDetail),</span><br><span class="line">    path(<span class="string">&#x27;logout/&#x27;</span>,views.LogOut),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在前端文件使用</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;userlist&#x27; %&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果需要用到变量，year为变量 --&gt;</span></span><br><span class="line">&#123;% url &#x27;blog-list&#x27; year %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果有多个相同名称的name，可以在urls.py中设置一个app_name来区分</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># manager/urls.py</span></span><br><span class="line">app_name=<span class="string">&#x27;manager&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;manager:userlist&#x27; %&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取post数据">获取post数据</h2><p>获取post数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = request.POST.get(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在post方法中也可以用GET</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="comment"># 判断用户登录</span></span><br><span class="line">        next_path = request.GET.get(<span class="string">&#x27;next&#x27;</span>,<span class="string">&#x27;/&#x27;</span>) <span class="comment"># 虽然是post方法，但还是可以用GET来获取路径的参数，即 ?key=value</span></span><br></pre></td></tr></table></figure><h2 id="登录和退出登录和session">登录和退出登录和session</h2><ul class="lvl-0"><li class="lvl-2"><p>登录和session</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate,login,logout</span><br><span class="line">username = request.POST.get(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">password = request.POST.get(<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># print(&#x27;post next====&#x27;,request.POST.get(&#x27;next&#x27;,&#x27;&#x27;),request.POST)</span></span><br><span class="line">user = authenticate(username=username,password=password)</span><br><span class="line"><span class="keyword">if</span> user:</span><br><span class="line">    login(request,user)</span><br><span class="line">    request.session[<span class="string">&quot;username&quot;</span>] = username <span class="comment"># 设置session</span></span><br><span class="line">    request.session.set_expiry(<span class="number">0</span>)  <span class="comment"># 关闭浏览器就过期</span></span><br><span class="line">    <span class="keyword">return</span> redirect(next_path)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>退出登录</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate,login,logout</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LogOut</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.user:</span><br><span class="line">        logout(request)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/&#x27;</span>)</span><br></pre></td></tr></table></figure><h1>adminlte</h1><h2 id="点击菜单加载页面后，菜单没有高亮">点击菜单加载页面后，菜单没有高亮</h2><p>在base.html添加以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 选择所有class为&#x27;nav-sidebar&#x27;的ul元素下的li元素</span></span><br><span class="line">  $(<span class="string">&#x27;ul.nav-sidebar li&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">    <span class="comment">// 检查当前li元素的第一个子元素（即a标签）的href属性值是否为当前路径</span></span><br><span class="line">    <span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">find</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>)===<span class="string">&#x27;&#123;&#123; request.path &#125;&#125;&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果条件满足，则为当前li元素的第一个子元素（即a标签）添加&#x27;active&#x27;类</span></span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">find</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="data-widget属性">data-widget属性</h2><p>AdminLTE框架中就使用data-widget属性来激活一些插件，如iframe插件、todo list插件等。</p><p>以下是一个使用data-widget属性的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-6&quot;</span> <span class="attr">id</span>=<span class="string">&quot;calendar_widget&quot;</span> <span class="attr">data-widget</span>=<span class="string">&quot;chat-init&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，data-widget=&quot;chat-init&quot;表示激活了一个名为&quot;chat-init&quot;的插件。</p><p>需要注意的是，data-widget属性并不是Bootstrap的标准属性，而是一些第三方框架（如AdminLTE）扩展出来的属性。因此，如果你在使用这些框架时遇到data-widget属性，可以参考相应的文档来了解其具体用法。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> adminlte </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试图片</title>
      <link href="/s/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/"/>
      <url>/s/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/s/hello-world/"/>
      <url>/s/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Github Page + Hexo 搭建个人博客问题小记</title>
      <link href="/s/Github-Page-Hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E5%B0%8F%E8%AE%B0/"/>
      <url>/s/Github-Page-Hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在使用Github Page + Hexo搭建个人博客的时候遇到了一些问题，现记录如下，主题使用的是cactus</p></blockquote><h1>问题1 hexo-deployer-git 提示输入用户名/密码</h1><p>在<code>deploy</code>中配置了<code>token</code>后，使用<code>hexo g -d</code>部署到<code>Github</code>，提示输入用户名密码，但是现在<code>Github</code>已经不支持命令行使用用户名密码登录了，所以需要改为<code>SSH</code>的方式，将<code>deploy</code>的<code>token</code>去掉，<code>repo</code>配置为<code>git@github.com/用户名/仓库名</code>在Github仓库下，选择<code>Settings &gt; Deploy keys &gt;添加一个Deploy key</code>，将系统的<code>~/.ssh/xxxx.pub</code>文件的内容布置上去，然后在GitHub界面勾选<code>Allow write access</code>即可。</p><h1>问题2 部署hexo后用自定义域名访问显示404，使用用户名.github.io访问正常</h1><p>方法1 这是因为部署hexo后，原来的CNAME文件被清除了，需要重新设置一下自定义域名。然后在hexo的<code>public</code>文件夹下，新建一个CNAME文件，内容为自定义的域名。如果不写这个文件的话，后面使用<code>hexo g -d</code>，有得重新设置一下自定义域名了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> public/CNAME</span><br><span class="line">www.51yunwei.top</span><br></pre></td></tr></table></figure><p>方法2 一劳永逸的方法，在_config.yml中设置url和插件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://www.51yunwei.top</span></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-cname</span></span><br></pre></td></tr></table></figure><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-cname</span><br></pre></td></tr></table></figure><h1>问题3 修改cactus主题样式不生效</h1><p>按照官方文档修改了<code>_config.yml</code>文件中的<code>colorscheme</code>参数不生效，需要重新执行以下命令，执行完之后自定义域名又不能访问了，按照问题1进行处理。</p><p>只要修改了配置文件，都要执行以下命令生成新的新的静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><h1>问题4 如何为每篇文章添加文字/图片？</h1><p>可以在主题下的<code>layout/post.ejs</code>中添加，把需要添加的内容放在<code>&lt;%- page.content %&gt;</code>后面，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- page.content %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span> 感谢浏览，如对您有帮助或需联系我，欢迎关注我的微信公众号~<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/s/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/s/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>Test PageFrom 2023<br>Test PageForm Gzhou</p><p>图片测试</p><p>Django学习<br><a href="https://zhuanlan.zhihu.com/p/113447102">https://zhuanlan.zhihu.com/p/113447102</a></p><p>simpleui官网<br><a href="https://newpanjing.github.io/simpleui_docs/">https://newpanjing.github.io/simpleui_docs/</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客测试 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>

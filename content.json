{"pages":[{"title":"About","date":"2024-05-29T03:00:36.210Z","path":"about/index.html","text":""},{"title":"Categories","date":"2024-05-29T03:00:36.230Z","path":"categories/index.html","text":""},{"title":"search","date":"2023-12-28T01:29:24.000Z","path":"search/index.html","text":""},{"title":"search","date":"2023-12-28T01:30:39.000Z","path":"search/index-1.html","text":""},{"title":"Tags","date":"2024-05-29T03:00:36.231Z","path":"tags/index.html","text":""},{"title":"","date":"2023-12-30T09:42:02.302Z","path":"categories/index.html","text":""}],"posts":[{"title":"给hexo主题添加代码块复制功能","date":"2024-05-29T07:32:02.000Z","path":"posts/undefined/","text":"适用于所有的Hexo主题 创建clipboard_use.js 在themes/xxx/source/js 目录下，创建clipboard_use.js，添加内容如下 12345678910111213141516171819202122232425262728293031323334353637$(&quot;.highlight&quot;).wrap(&quot;&lt;div class=&#x27;code-wrapper&#x27; style=&#x27;position:relative&#x27;&gt;&lt;/div&gt;&quot;);/*页面载入完成后，创建复制按钮*/!function (e, t, a) &#123; /* code */ var initCopyCode = function () &#123; var copyHtml = &#x27;&#x27;; copyHtml += &#x27;&lt;button class=&quot;btn-copy&quot; data-clipboard-snippet=&quot;&quot;&gt;&#x27;; copyHtml += &#x27; &lt;i class=&quot;fa fa-clipboard&quot;&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;&#x27;; copyHtml += &#x27;&lt;/button&gt;&#x27;; /* $(&quot;.highlight .code&quot;).before(copyHtml); */ $(&quot;.code-wrapper .highlight table&quot;).before(copyHtml); var clipboard = new ClipboardJS(&#x27;.btn-copy&#x27;, &#123; target: function (trigger) &#123; var tablee = trigger.nextElementSibling; &lt;!-- return trigger.nextElementSibling; --&gt; return tablee.firstElementChild.firstElementChild.firstElementChild.nextElementSibling; &#125; &#125;); clipboard.on(&#x27;success&#x27;, function (e) &#123; e.trigger.innerHTML = &quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;复制成功&lt;/span&gt;&quot; setTimeout(function () &#123; e.trigger.innerHTML = &quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;&quot; &#125;, 1000) e.clearSelection(); &#125;); clipboard.on(&#x27;error&#x27;, function (e) &#123; e.trigger.innerHTML = &quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;复制失败&lt;/span&gt;&quot; setTimeout(function () &#123; e.trigger.innerHTML = &quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;&quot; &#125;, 1000) e.clearSelection(); &#125;); &#125; initCopyCode();&#125;(window, document); 添加CSS 在theme/xxx/source/css/style.css样式中添加如下代码： 12345678910111213141516171819202122232425262728293031323334/* 代码块复制按钮 */.btn-copy &#123; display: inline-block; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc, #eee); border: 1px solid #d5d5d5; border-radius: 3px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-appearance: none; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; -webkit-transition: opacity .3s ease-in-out; -o-transition: opacity .3s ease-in-out; transition: opacity .3s ease-in-out; padding: 2px 6px; position: absolute; right: 5px; top: 5px; opacity: 0;&#125;.btn-copy span &#123; margin-left: 5px&#125;.code-wrapper:hover .btn-copy &#123; opacity: 1;&#125; 引入font-awesome 按钮上面添加了一个小图标美化，需要引入font-awesome. 在themes\\xxx\\layout\\_partial\\head.ejs或themes\\xxx\\layout\\_common\\head.ejs中的&lt;/head&gt;之前添加 1&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;//cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css&quot;&gt; 引用其他js 在themes\\xxx\\layout\\layout.ejs文件中的&lt;/body&gt;标签前也就是body标签之间的最后加入如下代码,这里是将clipboard.min.js和clipboard-use.js保存到CDN上，通过远程引用 或者将他们直接下载到本地直接引用也可 1234&lt;!-- 代码块复制功能 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/clipboard@2.0.4/dist/clipboard.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/clipboard_use.js&quot;&gt;&lt;/script&gt; 部署 最后就可以使用hexo提交就行啦 1hexo g -d 参考资料 为Hexo主题增加代码块复制功能","tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.51yunwei.top/tags/hexo/"}],"categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://www.51yunwei.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"当前博客使用主题及部署方式","date":"2024-05-29T03:39:06.000Z","path":"posts/undefined/","text":"当前使用的主题是Wikitten 部署文档链接如下： 1https://github.com/zthxxx/hexo-theme-Wikitten/blob/master/README_zh-CN.md","tags":[],"categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://www.51yunwei.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"清除模态框form的内容","date":"2024-04-19T00:38:14.000Z","path":"posts/undefined/","text":"在模态框提交数据后，页面不刷新的情况下，再次点击模态框，上次输入的内容还保留着，可以通过下面的方式清除模态框内容 12345678// 在ajax返回成功时可以执行$(&#x27;.modal-body&#x27;).find(&#x27;form&#x27;).trigger(&#x27;reset&#x27;);// 如果在用户点击关闭时也要执行，可以在show.bs.modal事件里设置 $(&#x27;#updatemodal&#x27;).on(&#x27;show.bs.modal&#x27;, function (event) &#123; $(&#x27;.modal-body&#x27;).find(&#x27;form&#x27;).trigger(&#x27;reset&#x27;); // 其他内容 &#125;)","tags":[{"name":"adminlte","slug":"adminlte","permalink":"https://www.51yunwei.top/tags/adminlte/"}],"categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://www.51yunwei.top/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"modal中使用form","date":"2024-04-18T02:14:04.000Z","path":"posts/undefined/","text":"html 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!-- 更新进展Modal --&gt; &lt;div class=&quot;modal fade&quot; id=&quot;updatemodal&quot; data-backdrop=&quot;static&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;staticBackdropLabel&quot; aria-hidden=&quot;true&quot; name=&quot;updatemodal&quot;&gt; &lt;div class=&quot;modal-dialog modal-xl&quot; role=&quot;document&quot;&gt; &lt;div class=&quot;modal-content&quot;&gt; &lt;div class=&quot;modal-header&quot;&gt; &lt;h5 class=&quot;modal-title&quot; id=&quot;staticBackdropLabel&quot;&gt;更新代办事件&lt;/h5&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt; &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt; &lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;modal-body&quot;&gt; &lt;!--编辑框开始--&gt; &lt;div class=&quot;card card-primary&quot;&gt; &lt;div class=&quot;card-header&quot;&gt; &lt;h3 class=&quot;card-title&quot;&gt;更新代办事件&lt;/h3&gt; &lt;/div&gt; &lt;!-- /.card-header --&gt; &lt;!-- form start --&gt; &lt;form id=&quot;updateForm&quot; name=&quot;updateForm&quot; novalidate=&quot;novalidate&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;detail_title&quot;&gt;&lt;a style=&quot;color: red;&quot;&gt;*&lt;/a&gt;进展标题&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;detail_title&quot; class=&quot;form-control&quot; id=&quot;detail_title&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot; data-select2-id=&quot;29&quot;&gt; &lt;label&gt;&lt;a style=&quot;color: red;&quot;&gt;*&lt;/a&gt;事件状态&lt;/label&gt; &lt;select class=&quot;form-control select2 select2-danger select2-hidden-accessible&quot; data-dropdown-css-class=&quot;select2-danger&quot; style=&quot;width: 100%;&quot; data-select2-id=&quot;12&quot; tabindex=&quot;-1&quot; aria-hidden=&quot;true&quot; id=&quot;event_status&quot; name=&quot;event_status&quot;&gt; &lt;option selected=&quot;selected&quot; data-select2-id=&quot;14&quot; value=&#x27;0&#x27;&gt;未完成&lt;/option&gt; &lt;option data-select2-id=&quot;35&quot; value=&#x27;1&#x27;&gt;完成&lt;/option&gt; &lt;option data-select2-id=&quot;36&quot; value=&#x27;2&#x27;&gt;终止&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;detail_content&quot;&gt;详细信息(选填)&lt;/label&gt; &lt;textarea id=&quot;detail_content&quot; class=&quot;form-control&quot; name=&quot;detail_content&quot; rows=&quot;4&quot; cols=&quot;50&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;!-- /.card-body --&gt; &lt;/div&gt; &lt;!--编辑框结束--&gt; &lt;/div&gt; &lt;div class=&quot;modal-footer&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-dismiss=&quot;modal&quot;&gt;取消&lt;/button&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;更新&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 更新进展Modal END Modal --&gt; js内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475 var updateurl $(&#x27;#updatemodal&#x27;).on(&#x27;show.bs.modal&#x27;, function (event) &#123; var button = $(event.relatedTarget) // Button that triggered the modal //注意这里的whatever对应前面html代码中button标签下data-whatever属性的后半段 updateurl = button.data(&#x27;url&#x27;) // Extract info from data-* attributes // var user = button.data(&#x27;user&#x27;) // If necessary, you could initiate an AJAX request here (and then do the updating in a callback). // Update the modal&#x27;s content. We&#x27;ll use jQuery here, but you could use a data binding library or other methods instead. var modal = $(this) //此处即为修改modal的标题 // modal.find(&#x27;.modal-title&#x27;).text(&#x27;New message to &#x27; + recipient) // modal.find(&#x27;.modal-body input&#x27;).val(recipient) //modal.find(&#x27;.card-primary form&#x27;).attr(&quot;action&quot;,url) &#125;) $(&quot;.modal-footer button[type=&#x27;submit&#x27;]&quot;).click(function(e)&#123; e.preventDefault(); // 阻止表单的默认提交行为 if (!$(&quot;#updateForm&quot;).valid()) &#123; // 如果验证失败，返回false，不提交数据 return false; &#125;; var formData = $(&quot;#updateForm&quot;).serialize(); console.log(&#x27;updateurl&#x27;+updateurl) $.ajax(&#123; url: updateurl, // 你的请求地址 type: &quot;POST&quot;, // 请求类型，必须是POST data: formData, // 你的表单数据 dataType: &quot;json&quot;, // 返回的数据类型，必须是json success: function(data)&#123; if (data.result === 0) &#123; // 请求成功，显示消息 $(&quot;#updatemodal&quot;).modal(&#x27;hide&#x27;) toastr.success(&#x27;成功：&#x27;+data.message) setTimeout(function() &#123; $(&#x27;#eventtable&#x27;).DataTable().ajax.reload(); &#125;, 1000) &#125; else if (data.result === 1) &#123; toastr.error(&#x27;失败：&#x27;+data.message) &#125; &#125;, error: function()&#123; // 请求失败的回调函数 console.log(&quot;Error&quot;); &#125; &#125;);&#125;);$(&#x27;#updateForm&#x27;).validate(&#123; rules: &#123; detail_title: &#123; required: true, minlength: 5 &#125;, &#125;, messages: &#123; detail_title: &#123; required: &quot;请输入更新标题&quot;, &#125;, &#125;, errorElement: &#x27;span&#x27;, errorPlacement: function (error, element) &#123; error.addClass(&#x27;invalid-feedback&#x27;); element.closest(&#x27;.form-group&#x27;).append(error); &#125;, highlight: function (element, errorClass, validClass) &#123; $(element).addClass(&#x27;is-invalid&#x27;); &#125;, unhighlight: function (element, errorClass, validClass) &#123; $(element).removeClass(&#x27;is-invalid&#x27;); &#125;&#125;); django内容 12345&lt;a class=&quot;btn btn-primary btn-sm &#123;disabled&#125;&quot; data-url=&quot;&#123;reverse(&#x27;event:eventupdate&#x27;,kwargs=&#123;&#x27;id&#x27;:Event.id&#125;)&#125;&quot; data-toggle=&quot;modal&quot; data-target=&quot;#updatemodal&quot;&gt; &lt;i class=&quot;fas fa-history&quot;&gt;&lt;/i&gt; &lt;/i&gt; 更新进展&lt;/a&gt;","tags":[{"name":"adminlte","slug":"adminlte","permalink":"https://www.51yunwei.top/tags/adminlte/"}],"categories":[{"name":"前端","slug":"前端","permalink":"https://www.51yunwei.top/categories/%E5%89%8D%E7%AB%AF/"}]},{"title":"adminlte中使用时间插件","date":"2024-04-17T09:29:02.000Z","path":"posts/undefined/","text":"daterangepicker 引入文件，语言是由moment控制的 123456&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;% static &#x27;adminlte/plugins/daterangepicker/daterangepicker.css&#x27; %&#125;&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;% static &#x27;adminlte/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css&#x27; %&#125;&quot;&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/moment/moment.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/moment/locale/zh-cn.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/daterangepicker/daterangepicker.js&#x27; %&#125;&quot;&gt;&lt;/script&gt; html 123456789&lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;&lt;a style=&quot;color: red;&quot;&gt;*&lt;/a&gt;计划完成时间:&lt;/label&gt; &lt;div class=&quot;input-group date&quot; id=&quot;reservationdatetime&quot; data-target-input=&quot;nearest&quot; &gt; &lt;input type=&quot;text&quot; class=&quot;form-control datetimepicker-input&quot; data-target=&quot;#reservationdatetime&quot; name=&quot;event_deadline&quot; id=&quot;event_deadline&quot; value=&quot;&#123;&#123; event_deadline &#125;&#125;&quot;&gt; &lt;div class=&quot;input-group-append&quot; data-target=&quot;#reservationdatetime&quot; data-toggle=&quot;datetimepicker&quot;&gt; &lt;div class=&quot;input-group-text&quot;&gt;&lt;i class=&quot;fa fa-calendar&quot;&gt;&lt;/i&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 验证，选择的时间不能大于当前时间 12345678910111213141516// 比较时间 $.validator.addMethod(&quot;compareDate&quot;, function(value, element) &#123; var event_deadline = $(&quot;#event_deadline&quot;).val(); var date1 = new Date(Date.parse(event_deadline.replace(&quot;-&quot;, &quot;/&quot;))); // 和当前时间比较 var date2 = new Date(); return date1 &gt;= date2; &#125;,&quot;结束时间不能早于当前时间&quot;); // 表单验证 $(&#x27;#editEventForm&#x27;).validate(&#123; rules: &#123; event_deadline: &#123; required: true, compareDate: true, &#125;, &#125;","tags":[{"name":"adminlte","slug":"adminlte","permalink":"https://www.51yunwei.top/tags/adminlte/"}],"categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://www.51yunwei.top/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}]},{"title":"django在windows上开机自启动和打开网页","date":"2024-04-17T08:55:08.000Z","path":"posts/undefined/","text":"bat文件 12345@echo off# 使用虚拟环境，如果不用虚拟环境，这句去掉call D:\\python\\testing\\.venv\\Scripts\\activate.bat# 执行python d:python\\django-adminlte-template-master\\django-adminlte-template-master\\manage.py runserver 127.0.0.1:18888 进入下面这个目录，新建一个vbs文件 1C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp vbs文件内容，后面的路径是上面bat文件的路径，网址自定义 12CreateObject(&quot;WScript.Shell&quot;).Run&quot;cmd /c D:\\python\\django-adminlte-template-master\\startDjango.bat&quot;,0CreateObject(&quot;WScript.Shell&quot;).Run&quot;http://127.0.0.1:18888&quot;, 3","tags":[{"name":"django","slug":"django","permalink":"https://www.51yunwei.top/tags/django/"}],"categories":[{"name":"django","slug":"django","permalink":"https://www.51yunwei.top/categories/django/"}]},{"title":"django将查询结果转换为字典","date":"2024-04-17T07:07:26.000Z","path":"posts/undefined/","text":"查询的结果默认是只读的，不能直接修改，如下面这样 12event = event.objects.get(id=1)event[&#x27;name&#x27;] = 123 有时候可能需要把数据获取到，然后添加一个字段传给前端，这时候就可以用以下的办法 123from django.forms.models import model_to_dictevent = model_to_dict(EventDB.objects.get(id=event_id))event[&#x27;name&#x27;] = 123","tags":[{"name":"django","slug":"django","permalink":"https://www.51yunwei.top/tags/django/"}],"categories":[{"name":"django","slug":"django","permalink":"https://www.51yunwei.top/categories/django/"}]},{"title":"在adminlte中使用datatable","date":"2024-04-17T06:40:21.000Z","path":"posts/undefined/","text":"基本使用 引入文件 1234567&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;% static &#x27;adminlte/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css&#x27; %&#125;&quot;&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/datatables/jquery.dataTables.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/datatables-responsive/js/dataTables.responsive.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/datatables-responsive/js/responsive.bootstrap4.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/datatables-buttons/js/dataTables.buttons.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/datatables-buttons/js/buttons.bootstrap4.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt; 基本js 123456789101112131415161718192021222324252627282930313233343536373839$(&#x27;#usertable&#x27;).DataTable(&#123; &quot;ajax&quot;: &quot;&#123;% url &#x27;manager:userlist&#x27; %&#125;&quot;, &quot;columns&quot;: [ &#123;&quot;data&quot;: &quot;username&quot;&#125;, &#123;&quot;data&quot;: &quot;create_time&quot;&#125;, &#123;&quot;data&quot;: &quot;superuser&quot;&#125;, &#123;&quot;data&quot;: &quot;passwd_expire_time&quot;&#125;, &#123;&quot;data&quot;: &quot;button&quot;&#125;, ], language: &#123;//自定义语言提示 &quot;processing&quot;: &quot;处理中...&quot;, &quot;lengthMenu&quot;: &quot;显示 _MENU_ 条用户数据&quot;, &quot;zeroRecords&quot;: &quot;没有找到相应的结果&quot;, &quot;info&quot;: &quot;第 _START_ 至 _END_ 行，共 _TOTAL_ 行&quot;, &quot;infoEmpty&quot;: &quot;第 0 至 0 项结果，共 0 项&quot;, &quot;infoFiltered&quot;: &quot;(由 _MAX_ 项结果过滤)&quot;, &quot;infoPostFix&quot;: &quot;&quot;, &quot;url&quot;: &quot;&quot;, &quot;thousands&quot;: &quot;&#x27;&quot;, &quot;emptyTable&quot;: &quot;表中数据为空&quot;, &quot;loadingRecords&quot;: &quot;载入中...&quot;, &quot;infoThousands&quot;: &quot;,&quot;, &quot;paginate&quot;: &#123; &quot;first&quot;: &quot;首页&quot;, &quot;previous&quot;: &quot;上页&quot;, &quot;next&quot;: &quot;下页&quot;, &quot;last&quot;: &quot;末页&quot; &#125; &#125;, // &quot;stateSave&quot;: true, // &quot;bAutoWidth&quot;: true, // &quot;scrollX&quot;: &quot;true&quot;, // &quot;scrollY&quot;: &quot;600px&quot;, // &quot;scrollCollapse&quot;: true, &quot;sDom&quot;: &quot;&lt;&#x27;row&#x27;&lt;&#x27;col-md-6&#x27;&lt;&#x27;#toolbar&#x27;&gt;&gt;&lt;&#x27;col-md-6&#x27;f&gt;&gt;&quot; + //设置表格最上面内容，可以在这里添加按钮等其他设置&quot;t&quot; + //设置tables&quot;&lt;&#x27;row&#x27;&lt;&#x27;col-md-5 sm-center&#x27;li&gt;&lt;&#x27;col-md-7 text-right sm-center&#x27;p&gt;&gt;&quot;,//设置表格最下面显示内容 &#125;); $(&quot;#toolbar&quot;).append(&#x27;&lt;a href=&quot;&#123;% url &quot;manager:usercreate&quot; %&#125;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;&lt;i class=&quot;fa fa-plus-square&quot;&gt;&lt;/i&gt;&amp;nbsp&amp;nbsp新建用户&lt;/button&gt;&lt;/a&gt;&#x27;) html 1234567891011121314&lt;table id=&quot;eventtable&quot; class=&quot;table table-bordered table-striped display hover&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;标题&lt;/th&gt; &lt;th&gt;完成时间&lt;/th&gt; &lt;th&gt;事件等级&lt;/th&gt; &lt;th&gt;工作量&lt;/th&gt; &lt;th&gt;标签&lt;/th&gt; &lt;th&gt;状态&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;/table&gt; 后端分页 html不变 js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950var table = $(&#x27;#eventtable&#x27;).DataTable(&#123; &quot;processing&quot;:true, &quot;serverSide&quot;:true, // 服务器分页 &quot;stateSave&quot;: true, //状态保持 &quot;ajax&quot;: &quot;&#123;% url &#x27;event:eventlist&#x27; %&#125;&quot;, &quot;autoWidth&quot;:true,////不开启自动宽度，用bootstrap的自适应去调整 &quot;lengthMenu&quot;: [10,50, 100],//表格行数选择框内数目 显示2条,4条,20条,50条 &quot;displayLength&quot;: 10,//默认的显示行数 (也就是每页显示几条数据) &quot;info&quot;:false, &quot;columns&quot;: [ &#123; &quot;class&quot;:&#x27;details-control&#x27;, &quot;orderable&quot;: true, &quot;data&quot;: null, &quot;defaultContent&quot;: &#x27;&#x27;, &#125;, &#123;&quot;data&quot;: &quot;event_title&quot;&#125;, &#123;&quot;data&quot;: &quot;event_deadline&quot;&#125;, &#123;&quot;data&quot;: &quot;event_level&quot;&#125;, &#123;&quot;data&quot;: &quot;event_workload&quot;&#125;, &#123;&quot;data&quot;: &quot;event_label&quot;&#125;, &#123;&quot;data&quot;: &quot;event_status&quot;&#125;, &#123;&quot;data&quot;: &quot;button&quot;&#125;, ], &quot;order&quot;: [[2, &#x27;asc&#x27;]], &quot;language&quot;: &#123;//自定义语言提示 &quot;processing&quot;: &quot;处理中...&quot;, &quot;lengthMenu&quot;: &quot;显示 _MENU_ 项结果&quot;, &quot;zeroRecords&quot;: &quot;没有找到相应的结果&quot;, &quot;info&quot;: &quot;第 _START_ 至 _END_ 行，共 _TOTAL_ 行&quot;, &quot;infoEmpty&quot;: &quot;第 0 至 0 项结果，共 0 项&quot;, &quot;infoFiltered&quot;: &quot;(由 _MAX_ 项结果过滤)&quot;, &quot;infoPostFix&quot;: &quot;&quot;, &quot;url&quot;: &quot;&quot;, &quot;thousands&quot;: &quot;&#x27;&quot;, &quot;emptyTable&quot;: &quot;表中数据为空&quot;, &quot;loadingRecords&quot;: &quot;载入中...&quot;, &quot;infoThousands&quot;: &quot;,&quot;, &quot;paginate&quot;: &#123; &quot;first&quot;: &quot;首页&quot;, &quot;previous&quot;: &quot;上页&quot;, &quot;next&quot;: &quot;下页&quot;, &quot;last&quot;: &quot;末页&quot; &#125; &#125;, &quot;sDom&quot;: &quot;&lt;&#x27;row&#x27;&lt;&#x27;col-md-6&#x27;&lt;&#x27;#toolbar&#x27;&gt;&gt;&lt;&#x27;col-md-6&#x27;f&gt;&gt;&quot; + //设置表格最上面内容，可以在这里添加按钮等其他设置 &quot;t&quot; + //设置tables &quot;&lt;&#x27;row&#x27;&lt;&#x27;col-md-5 sm-center&#x27;li&gt;&lt;&#x27;col-md-7 text-right sm-center&#x27;p&gt;&gt;&quot; &#125; ); $(&quot;#toolbar&quot;).append(&#x27;&lt;a href=&quot;&#123;% url &quot;event:eventedit&quot; %&#125;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;&lt;i class=&quot;fa fa-plus-square&quot;&gt;&lt;/i&gt;&amp;nbsp&amp;nbsp新建代办&lt;/button&gt;&lt;/a&gt;&#x27;) django 12345678910111213141516171819202122232425262728_query_data = request.GET# 获取开始值start_index = int(_query_data.get(&quot;start&quot;,0))# 获取列表长度search_length = int(_query_data.get(&quot;length&quot;,10))# 算出列表区间end_index = start_index + search_length# 搜索，前端点搜索，search[value]有数据，根据这个数据去搜索if _query_data.get(&#x27;search[value]&#x27;): search_str = _query_data.get(&#x27;search[value]&#x27;) # 搜索有意义的段 EventInfo = EventDB.objects.filter(Q(event_title__icontains=search_str) | Q(event_level__icontains=search_str) | Q(event_detail__icontains=search_str) | Q(event_label__icontains=search_str))else: # 没搜索就查全部 EventInfo = EventDB.objects.all()# 获取排序的列，这里循环了10次，可以根据自己的列数进行调整order_args = []for i in range(0,10): order_column=&#x27;order[%d][column]&#x27; % i if _query_data.get(order_column): order_col = _query_data.get(f&quot;columns[&#123;_query_data.get(order_column)&#125;][data]&quot;) order_args.append(order_col) if _query_data.get(&#x27;order[%d][dir]&#x27; % i) == &quot;asc&quot;: order_col = &#x27;-&#x27; + order_col order_args.append(order_col)# order_by可以传入多个值，在不确定要传入多少个值的情况下，可以把值先保存到列表，再通过*args把列表的多个值传入EventInfo = EventInfo.order_by(*order_args)[start_index:end_index] datatable 定时刷新 12345678$(function () &#123; function refresh() &#123; var table = $(&#x27;#eventtable&#x27;).DataTable(); table.ajax.reload(null, false); // 刷新表格数据，分页信息不会重置 &#125; // 每隔5秒刷新一次数据 setInterval(refresh, 5000);&#125;)","tags":[{"name":"adminlte","slug":"adminlte","permalink":"https://www.51yunwei.top/tags/adminlte/"}],"categories":[{"name":"django","slug":"django","permalink":"https://www.51yunwei.top/categories/django/"}]},{"title":"在adminlte中使用select2","date":"2024-04-17T06:40:10.000Z","path":"posts/undefined/","text":"引入css和js 123&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;% static &#x27;adminlte/plugins/select2/css/select2.min.css&#x27; %&#125;&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;% static &#x27;adminlte/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css&#x27; %&#125;&quot;&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/select2/js/select2.full.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt; 基本使用 html 复制的时候把span标签的内容去掉 123456789101112&lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;&lt;a style=&quot;color: red;&quot;&gt;*&lt;/a&gt;标签&lt;/label&gt; &lt;div class=&quot;select2-purple&quot;&gt; &lt;select class=&quot;select2bs4 select2-hidden-accessible&quot; multiple=&quot;&quot; data-dropdown-css-class=&quot;select2-purple&quot; data-placeholder=&quot;Select a State&quot; style=&quot;width: 100%;&quot; data-select2-id=&quot;23&quot; tabindex=&quot;-1&quot; aria-hidden=&quot;true&quot; name=&quot;event_label&quot; id=&quot;event_label&quot;&gt; &lt;option vlaue=&quot;材料&quot;&gt;材料&lt;/option&gt; &lt;option vlaue=&quot;学习&quot;&gt;学习&lt;/option&gt; &lt;option vlaue=&quot;问题处理&quot;&gt;问题处理&lt;/option&gt; &lt;option vlaue=&quot;会议&quot;&gt;会议&lt;/option&gt; &lt;option vlaue=&quot;其它&quot;&gt;其它&lt;/option&gt; &lt;/select&gt; &lt;/div&gt;&lt;/div&gt; js 1$(&quot;#event_label&quot;).select2() 默认值 123456# 默认单选$(&#x27;#event_label&#x27;).val(&quot;Low&quot;)# jquery可以把字符串转换为数组arrValue = &quot;&#123;&#123; event_label &#125;&#125;&quot;.split(&#x27;;&#x27;);# 多选时，传入数组，可以默认选中多个$(&#x27;#event_label&#x27;).val(arrValue).trigger(&#x27;change&#x27;)","tags":[{"name":"adminlte","slug":"adminlte","permalink":"https://www.51yunwei.top/tags/adminlte/"}],"categories":[{"name":"django","slug":"django","permalink":"https://www.51yunwei.top/categories/django/"}]},{"title":"Linux创建证书","date":"2024-02-01T01:04:40.000Z","path":"posts/undefined/","text":"创建证书请求文件CSR和私钥 123456789101112131415161718openssl req -new -nodes -sha256 -newkey rsa:2048 -keyout [$Key_File] -out [$OpenSSL_CSR]说明new：指定生成一个新的 CSR 文件。nodes：指定密钥文件不被加密。sha256：指定摘要算法。newkey rsa:2048：指定密钥类型和长度。[$Key_File]：密钥文件名称。[$OpenSSL_CSR]：加密后文件的存放路径。new：指定生成一个新的 CSR 文件。4. 根据系统返回的提示，输入生成 CSR 文件所需的信息。以下是关于提示的说明：Organization Name：公司名称，可以是中文或英文。Organizational Unit Name：部门名称，可以是中文或英文。Country Code：申请单位所属国家，只能是两个字母的国家码。例如，中国填写为 CN。State or Province Name：州名或省份名称，可以是中文或英文。Locality Name：城市名称，可以是中文或英文。Common Name：申请 SSL 证书的具体网站域名。Email Address：可选择不输入。Challenge Password：可选择不输入。5. 按照命令提示输入相应内容后，即可在当前目录下获取密钥文件和 CSR 文件。 创建证书 1openssl x509 -signkey xxx.key -in xxx.csr -req -days 365 -out xxx.crt 获取证书过期时间 1openssl x509 -in &lt;cert&gt;.pem -noout -dates","tags":[{"name":"Linux","slug":"Linux","permalink":"https://www.51yunwei.top/tags/Linux/"}],"categories":[{"name":"Linux系统","slug":"Linux系统","permalink":"https://www.51yunwei.top/categories/Linux%E7%B3%BB%E7%BB%9F/"}]},{"title":"django和adminlte笔记","date":"2024-01-03T01:26:27.000Z","path":"posts/undefined/","text":"django 新增环境 123apt install python3-venvpython3 -m venv django4source django4/bin/active 安装Django 1pip install django -i http://pypi.douban.com/simple/ --trusted-host=pypi.douban.com/simple 创建和初始化项目 创建 1django-admin startproject mysite 修改settings文件 1234567891011121314151617181920212223242526import os # 新增ALLOWED_HOSTS = [&#x27;*&#x27;] #修改# 修改TEMPLATES = [ &#123; &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;, &#x27;DIRS&#x27;: [os.path.join(BASE_DIR,&#x27;templates&#x27;)], #修改 &#x27;APP_DIRS&#x27;: True, &#x27;OPTIONS&#x27;: &#123; &#x27;context_processors&#x27;: [ &#x27;django.template.context_processors.debug&#x27;, &#x27;django.template.context_processors.request&#x27;, &#x27;django.contrib.auth.context_processors.auth&#x27;, &#x27;django.contrib.messages.context_processors.messages&#x27;, ], &#125;, &#125;,]# 以下为修改LANGUAGE_CODE = &#x27;zh-hans&#x27;TIME_ZONE = &#x27;Asia/Shanghai&#x27;USE_TZ = False# 新增staticSTATICFILES_DIRS = [ os.path.join(BASE_DIR, &quot;static&quot;),] 新增文件夹 1mkdir 项目目录/templates 项目目录/static 自定义用户模型 新建一个app 1python manage.py startapp manager 注册到settings.py中 123456789INSTALLED_APPS = [ &#x27;django.contrib.admin&#x27;, &#x27;django.contrib.auth&#x27;, &#x27;django.contrib.contenttypes&#x27;, &#x27;django.contrib.sessions&#x27;, &#x27;django.contrib.messages&#x27;, &#x27;django.contrib.staticfiles&#x27;, &#x27;manager&#x27;, #新增] 修改manager/models.py，根据自己的需要修改 1234567891011121314151617from django.db import modelsfrom django.contrib.auth.models import BaseUserManager,AbstractUserimport uuid# Create your models here.# 自定义user，还需要在setting文件中配置AUTH_USER_MODELSclass UserDB(AbstractUser): uid = models.UUIDField(primary_key=True,default=uuid.uuid4) username = models.CharField(max_length=15,verbose_name=&quot;用户名&quot;, unique=True) phone = models.CharField(max_length=11,verbose_name=&quot;手机号码&quot;, null=True,blank=True) email = models.EmailField(verbose_name=&#x27;邮箱&#x27;, null=True,blank=True) create_time = models.DateTimeField(&#x27;创建时间&#x27;,auto_now_add=True) update_time = models.DateTimeField(&#x27;更新时间&#x27;,auto_now=True) class Meta: verbose_name = &#x27;用户信息&#x27; verbose_name_plural = verbose_name def __str__(self): return self.username 编辑settings.py文件 12# 新增自定义用户模型AUTH_USER_MODEL = &#x27;manager.UserDB&#x27; 数据库迁移 1234#生成迁移文件python manage.py makemigrations#应用迁移文件python manage.py migrate 创建用户 管理员用户 1python manage.py createsuperuser 普通用户进入项目shell 1python manage.py shell 12from django.contrib.auth.models import User(用户数据库，默认为User，如果自定义了这里需要修改)User.objects.create_user(&#x27;username&#x27;, &#x27;email@example.com&#x27;, &#x27;password&#x27;) 站点验证和登录 除了指定界面，用户访问其他界面时，如果没有登录就跳到登录界面，登录完成后跳转到需要访问的界面比如用户访问：https://51yunwei.top/system/ ，会跳转为 https://51yunwei.top/login/?next=/system/，完成登录后，跳转回https://51yunwei.top/system/ 此处代码来自运维咖啡吧，通过中间件的方式进行处理 新建一个目录 1234mkdir system/middleware -pcd system/middlewaretouch __init__.pytouch loginrequired.py 编辑loginrequired.py文件 123456789101112131415from django.shortcuts import redirectfrom django.conf import settingsclass LoginRequiredMiddleware: def __init__(self, get_response): # 启动django的时候会执行init，用get_resonpse来获取下一个中间件或视图函数的响应 self.get_response = get_response self.login_url = settings.LOGIN_URL self.open_urls = [self.login_url] + getattr(settings, &#x27;OPEN_URLS&#x27;, []) # 登录界面和OPEN_URLS里面的路径都是开放的 def __call__(self, request): # 每次有请求到达时，Django都会调用这个方法。 if not request.user.is_authenticated and request.path_info not in self.open_urls: return redirect(self.login_url + &#x27;?next=&#x27; + request.path) return self.get_response(request) # 每个中间件都有一个get_response函数，这个函数会返回下一个中间件或视图函数的响应。 OPEN_URLS：不需要验证就能访问到的界面 LOGIN_URL：需要验证才能访问到的界面通过在settings中配置变量实现 编辑settings文件 123456789101112131415MIDDLEWARE = [ &#x27;django.middleware.security.SecurityMiddleware&#x27;, &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;, &#x27;django.middleware.common.CommonMiddleware&#x27;, # &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;, &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;, &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;, &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;, &#x27;system.middleware.loginrequired.LoginRequiredMiddleware&#x27;, # 新增，根据自己的路径进行修改]&gt; 注意：验证的中间件要放最后面，因为最后一个中间件是第一个执行的。# 新增全局登录地址LOGIN_URL=&#x27;/login/&#x27;OPEN_URLS=[] 在登录的函数中拿到next地址，并返回，如下 1234567891011121314151617181920class LoginView(View): def get(self,request): if request.user.is_authenticated: return render(request,&#x27;base.html&#x27;) return render(request,&#x27;login.html&#x27;) def post(self,request): # 判断用户登录 next_path = request.GET.get(&#x27;next&#x27;,&#x27;/&#x27;) # 虽然是post方法，但还是可以用GET来获取路径的参数，即 ?key=value username = request.POST.get(&#x27;username&#x27;,&#x27;&#x27;) password = request.POST.get(&#x27;password&#x27;,&#x27;&#x27;) # print(&#x27;post next====&#x27;,request.POST.get(&#x27;next&#x27;,&#x27;&#x27;),request.POST) user = authenticate(username=username,password=password) if user: login(request,user) request.session[&quot;username&quot;] = username request.session.set_expiry(0) # 设置session过期时间为一周后 return redirect(next_path) login_error_message = &#x27;用户名或密码错误&#x27; print(&#x27;登录失败&#x27;) return render(request,&#x27;login.html&#x27;,&#123;&#x27;login_error_message&#x27;:login_error_message&#125;) 返回函数 一些常见的视图返回函数的导入方式： HttpResponse：这是一个Django内置的HTTP响应类，可以直接从django.http模块导入。 1from django.http import HttpResponse HttpResponseRedirect：这也是一个Django内置的HTTP响应类，可以直接从django.http模块导入。 1from django.http import HttpResponseRedirect render：这是一个用于渲染模板并返回HTTP响应的函数，可以从django.shortcuts模块导入。 1from django.shortcuts import render redirect：这是一个用于返回重定向视图的函数，也可以从django.shortcuts模块导入。 1from django.shortcuts import redirect JsonResponse：这是一个用于返回JSON格式HTTP响应的函数，可以从django.http模块导入。 1from django.http import JsonResponse Response：这是Django REST Framework中的一个函数，用于返回HTTP响应，需要从rest_framework.response模块导入。 1from rest_framework.response import Response reverse 1from django.urls import reverse 设置url 在项目根urls.py中配置 1234567from django.contrib import adminfrom django.urls import path,include # 新增includeurlpatterns = [ path(&#x27;admin/&#x27;, admin.site.urls), path(&#x27;&#x27;, include(&#x27;manager.urls&#x27;)), # 新增，app名称.urls] 在app目录下新建urls.py 123456789from django.urls import pathfrom . import viewsurlpatterns = [ path(&#x27;&#x27;, views.IndexView), path(&#x27;user/&#x27;,views.UserManager.as_view()), path(&#x27;login/&#x27;,views.LoginView.as_view()), path(&#x27;user/&lt;uuid:uid&gt;/&#x27;,views.UserDetail), path(&#x27;logout/&#x27;,views.LogOut),] 使用url模板标签生成路径 在url中配置name 1234567urlpatterns = [ path(&#x27;&#x27;, views.IndexView), path(&#x27;user/&#x27;,views.UserManager.as_view(),name=&#x27;userlist&#x27;), # 配置name path(&#x27;login/&#x27;,views.LoginView.as_view()), path(&#x27;user/&lt;uuid:uid&gt;/&#x27;,views.UserDetail), path(&#x27;logout/&#x27;,views.LogOut),] 在前端文件使用 123&lt;a href=&quot;&#123;% url &#x27;userlist&#x27; %&#125;&quot; class=&quot;nav-link&quot;&gt;&lt;!-- 如果需要用到变量，year为变量 --&gt;&#123;% url &#x27;blog-list&#x27; year %&#125; 如果有多个相同名称的name，可以在urls.py中设置一个app_name来区分 12# manager/urls.pyapp_name=&#x27;manager&#x27; 1&lt;a href=&quot;&#123;% url &#x27;manager:userlist&#x27; %&#125;&quot; class=&quot;nav-link&quot;&gt; 获取post数据 获取post数据 1username = request.POST.get(&#x27;username&#x27;,&#x27;&#x27;) 在post方法中也可以用GET 123def post(self,request): # 判断用户登录 next_path = request.GET.get(&#x27;next&#x27;,&#x27;/&#x27;) # 虽然是post方法，但还是可以用GET来获取路径的参数，即 ?key=value 登录和退出登录和session 登录和session 12345678910from django.contrib.auth import authenticate,login,logoutusername = request.POST.get(&#x27;username&#x27;,&#x27;&#x27;)password = request.POST.get(&#x27;password&#x27;,&#x27;&#x27;)# print(&#x27;post next====&#x27;,request.POST.get(&#x27;next&#x27;,&#x27;&#x27;),request.POST)user = authenticate(username=username,password=password)if user: login(request,user) request.session[&quot;username&quot;] = username # 设置session request.session.set_expiry(0) # 关闭浏览器就过期 return redirect(next_path) 退出登录 12345from django.contrib.auth import authenticate,login,logoutdef LogOut(request): if request.user: logout(request) return redirect(&#x27;/login/&#x27;) 设置密码和检查密码 设置密码使用set_password 1user.set_password(&#x27;xxxx&#x27;) 检查密码是否和输入的一致 12from django.contrib.auth.hashers import check_passwordcheck_password(request.POST.get(&#x27;currpassword&#x27;),user.password) # 输入的密码，数据库中保存的密码 上传到github 1、生成requirements.txt文件 1pip freeze &gt; ./requirements.txt文件 设置全局可使用的变量 在template中，我们可以直接使用request变量，现在我们来设置一下可以直接使用的自定义变量 system/systeminfo.py 1234567891011from manager.models import SystemInfoDBdef SystemInfo(request): system_info = SystemInfoDB.objects.all() if system_info.count(): system_title = system_info.first().system_title if system_info.first().system_title else &#x27;未设置的title&#x27; system_name = system_info.first().system_name if system_info.first().system_name else &#x27;未设置的系统名称&#x27; else: system_title = &#x27;未设置的title&#x27; system_name = &#x27;未设置的系统名称&#x27; return &#123;&#x27;systeminfo&#x27;:&#123;&#x27;system_title&#x27;:system_title,&#x27;system_name&#x27;:system_name&#125;&#125; manager/models.py 12345678class SystemInfoDB(models.Model): system_title = models.CharField(max_length=128,verbose_name=&quot;网页title&quot;) system_name = models.CharField(max_length=128,verbose_name=&quot;站点名称&quot;) class Meta: verbose_name = &#x27;系统信息&#x27; verbose_name_plural = verbose_name def __str__(self): return self.system_name settings.py 12345678910111213141516TEMPLATES = [ &#123; &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;, &#x27;DIRS&#x27;: [os.path.join(BASE_DIR,&#x27;templates&#x27;)], &#x27;APP_DIRS&#x27;: True, &#x27;OPTIONS&#x27;: &#123; &#x27;context_processors&#x27;: [ &#x27;django.template.context_processors.debug&#x27;, &#x27;django.template.context_processors.request&#x27;, &#x27;django.contrib.auth.context_processors.auth&#x27;, &#x27;django.contrib.messages.context_processors.messages&#x27;, &#x27;system.systeminfo.SystemInfo&#x27;, # 新增 ], &#125;, &#125;,] 这样就可以直接在html中使用这个变量了 1&lt;title&gt;&#123;&#123; systeminfo.system_title &#125;&#125;&lt;/title&gt; adminlte 点击菜单加载页面后，菜单没有高亮 在base.html添加以下代码 12345678910&lt;script&gt; // 选择所有class为&#x27;nav-sidebar&#x27;的ul元素下的li元素 $(&#x27;ul.nav-sidebar li&#x27;).each(function(i)&#123; // 检查当前li元素的第一个子元素（即a标签）的href属性值是否为当前路径 if($(this).find(&#x27;a&#x27;).attr(&#x27;href&#x27;)===&#x27;&#123;&#123; request.path &#125;&#125;&#x27;)&#123; // 如果条件满足，则为当前li元素的第一个子元素（即a标签）添加&#x27;active&#x27;类 $(this).find(&#x27;a&#x27;).addClass(&#x27;active&#x27;); &#125; &#125;);&lt;/script&gt; 优化版：比如用户管理一个菜单，里面有编辑用户、查看用户等，url为/user/xxxx/edit/、/user/xxx/detail/，这样的话上面的方法就不管用了，因为菜单是/user/，匹配不到/user/xxx/edit/，所以修改如下： 123456789101112131415161718192021&lt;script&gt; // 选择所有class为&#x27;nav-sidebar&#x27;的ul元素下的li元素 $(&#x27;ul.nav-sidebar li&#x27;).each(function(i)&#123; // 把patharr切割为列表，如[user,xxxx,eidt] var patharr = &#x27;&#123;&#123; request.path &#125;&#125;&#x27;.split(&quot;/&quot;); // 循环列表 for (var i = patharr.length; i &gt; 0; i--) &#123; // 获取列表的值，并转换为字符串 // 比如一开始获取的值为 /user/xxx/edit/,如果没有匹配，下次循环为/user/xxx/，最后为/user/，只要有一个能匹配上，就把菜单高亮 var newpatharr = patharr.slice(0, i); var path = newpatharr.join(&quot;/&quot;)+&#x27;/&#x27;; console.log(path) // 检查当前li元素的第一个子元素（即a标签）的href属性值是否为当前路径 if($(this).find(&#x27;a&#x27;).attr(&#x27;href&#x27;)===path)&#123; // 如果条件满足，则为当前li元素的第一个子元素（即a标签）添加&#x27;active&#x27;类 $(this).find(&#x27;a&#x27;).addClass(&#x27;active&#x27;); break &#125; &#125; &#125;);&lt;/script&gt; data-widget属性 AdminLTE框架中就使用data-widget属性来激活一些插件，如iframe插件、todo list插件等。 以下是一个使用data-widget属性的例子： 1&lt;div class=&quot;col-lg-6&quot; id=&quot;calendar_widget&quot; data-widget=&quot;chat-init&quot;&gt;&lt;/div&gt; 在这个例子中，data-widget=&quot;chat-init&quot;表示激活了一个名为&quot;chat-init&quot;的插件。 需要注意的是，data-widget属性并不是Bootstrap的标准属性，而是一些第三方框架（如AdminLTE）扩展出来的属性。因此，如果你在使用这些框架时遇到data-widget属性，可以参考相应的文档来了解其具体用法。 ajax提交数据 html代码如下 123456789101112131415161718192021&lt;form id=&quot;editUserForm&quot; novalidate=&quot;novalidate&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;username&quot;&gt;用户名&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; class=&quot;form-control&quot; id=&quot;username&quot; value=&quot;&#123;&#123; username &#125;&#125;&quot; readonly&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;Email&quot;&gt;邮箱地址&lt;/label&gt; &lt;input type=&quot;email&quot; name=&quot;email&quot; class=&quot;form-control&quot; id=&quot;Email&quot; value=&quot;&#123;&#123; email &#125;&#125;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;phone&quot;&gt;手机号码&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;phone&quot; class=&quot;form-control&quot; id=&quot;phone&quot; value=&quot;&#123;&#123; phone &#125;&#125;&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- /.card-body --&gt; &lt;div class=&quot;card-footer&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;修改&amp;保存&lt;/button&gt; &lt;a href=&quot;&#123;% url &#x27;manager:userlist&#x27; %&#125;&quot; class=&quot;btn btn-success float-right&quot;&gt;&lt;/i&gt; 返回列表&lt;/a&gt; &lt;/div&gt; &lt;/form&gt; ajax代码： 12345678910111213141516171819202122$(&quot;#editUserForm button[type=&#x27;submit&#x27;]&quot;).click(function(e)&#123; e.preventDefault(); // 阻止表单的默认提交行为 var formData = $( &quot;#editUserForm&quot; ).serialize(); $.ajax(&#123; url: &quot;&#123;% url &#x27;manager:useredit&#x27; uid %&#125;&quot;, // 你的请求地址 type: &quot;POST&quot;, // 请求类型，必须是POST data: formData, // 你的表单数据 dataType: &quot;json&quot;, // 返回的数据类型，必须是json success: function(data)&#123; if (data.result === 0) &#123; // 请求成功，显示消息 toastr.success(data.message) &#125; else if (data.result === 1) &#123; toastr.success(data.message) &#125; &#125;, error: function()&#123; // 请求失败的回调函数 console.log(&quot;Error&quot;); &#125; &#125;);&#125;); python代码 1234567891011121314def post(self,request,uid): op_user = request.user if not op_user.is_superuser or op_user.uid != uid: # 如果不是管理员或者修改的不是自己的用户信息 resultdict = &#123;&#x27;result&#x27;:1,&#x27;message&#x27;:&#x27;无权限修改其他用户的信息&#x27;&#125; try: user = UserDB.objects.filter(uid=uid).first() user.email = request.POST.get(&#x27;email&#x27;,&#x27;&#x27;) user.phone = request.POST.get(&#x27;phone&#x27;,&#x27;&#x27;) user.save() resultdict = &#123;&#x27;result&#x27;:0,&#x27;message&#x27;:&#x27;修改成功&#x27;&#125; except Exception as err : resultdict = &#123;&#x27;result&#x27;:1,&#x27;message&#x27;:&#x27;修改用户信息失败%s&#x27; % err&#125; finally: return JsonResponse(resultdict) 吐司 引入文件 123456&lt;!-- toastr需要导入的css文件 --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;% static &#x27;adminlte/plugins/toastr/toastr.min.css&#x27; %&#125;&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;% static &#x27;adminlte/plugins/sweetalert2/sweetalert2.min.css&#x27; %&#125;&quot;&gt;&lt;!-- 吐司需要导入的js --&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/toastr/toastr.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/sweetalert2/sweetalert2.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt; 初始化 123456var Toast = Swal.mixin(&#123; toast: true, position: &#x27;top-end&#x27;, showConfirmButton: false, timer: 3000 # 多少秒后消失 &#125;); 返回上一个url 1&lt;a href=&quot;javascript:history.go(-1);&quot;&gt; 在datatable头添加一个按钮，和search平行 1234567891011&lt;script&gt; $(function () &#123; $(&quot;#usertable&quot;).DataTable(&#123; &quot;responsive&quot;: true, &quot;lengthChange&quot;: false, &quot;autoWidth&quot;: false, &quot;buttons&quot;: [&quot;copy&quot;, &quot;csv&quot;, &quot;excel&quot;, &quot;pdf&quot;, &quot;print&quot;, &quot;colvis&quot;], &quot;sDom&quot;: &quot;&lt;&#x27;row&#x27;&lt;&#x27;col-md-6&#x27;&lt;&#x27;#toolbar&#x27;&gt;&gt;&lt;&#x27;col-md-6&#x27;f&gt;&gt;&quot;,//这里新增 &#125;).buttons().container().appendTo(&#x27;#example1_wrapper .col-md-6:eq(0)&#x27;); $(&quot;#toolbar&quot;).append(&#x27;&lt;a href=&quot;&#123;% url &quot;manager:usercreate&quot; %&#125;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;&lt;i class=&quot;fa fa-plus-square&quot;&gt;&lt;/i&gt;&amp;nbsp&amp;nbsp新建主机&lt;/button&gt;&lt;/a&gt;&#x27;) //这里新增 &#125;); // document.querySelector(&#x27;div.toolbar&#x27;).innerHTML = &#x27;&lt;b&gt;Custom tool bar! Text/images etc.&lt;/b&gt;&#x27;;&lt;/script&gt; post后url显示参数，如何修改？ 123&lt;!-- 在form标签增加以下字段 --&gt;&lt;form onsubmit=&quot;return false&quot; &gt; 提交数据后，通过request.POST获取不到 前端post后，django是通过标签中的name='xxx’获取到数据的，比如，后端通过reqeust.POST.get(‘username’)获取数据所以template一定要设置name属性 自定义模态框的内容 模态框html，id为mymodal 1234567891011121314151617181920212223&lt;!-- 模态框 --&gt;&lt;div class=&quot;modal fade&quot; id=&quot;mymodal&quot; style=&quot;display: none;&quot; aria-hidden=&quot;true&quot;&gt; &lt;div class=&quot;modal-dialog&quot;&gt; &lt;div class=&quot;modal-content&quot;&gt; &lt;div class=&quot;modal-header&quot;&gt; &lt;h4 class=&quot;modal-title&quot; id=&quot;mymodaltitle&quot;&gt;&lt;/h4&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt; &lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt; &lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;modal-body&quot;&gt; &lt;p id=&quot;mymodalcontent&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;modal-footer justify-content-between&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;取消&lt;/button&gt; &lt;a id=&quot;mymodelhref&quot; style=&quot;color: white;&quot; role=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- /.modal-content --&gt; &lt;/div&gt; &lt;!-- /.modal-dialog --&gt;&lt;/div&gt;&lt;!-- 模态框结束 --&gt; js代码 1234567891011121314// 这里用的是模态框的id $(&#x27;#mymodal&#x27;).on(&#x27;show.bs.modal&#x27;, function (event) &#123; var button = $(event.relatedTarget) // Button that triggered the modal //注意这里的whatever对应前面html代码中button标签下data-whatever属性的后半段，这里只要定义了data-xxx，就可以通过js获取 // var recipient = button.data(&#x27;whatever&#x27;) // Extract info from data-* attributes // If necessary, you could initiate an AJAX request here (and then do the updating in a callback). // Update the modal&#x27;s content. We&#x27;ll use jQuery here, but you could use a data binding library or other methods instead. var modal = $(this) //此处即为修改modal的标题，都是通过class获取 modal.find(&#x27;.modal-title&#x27;).text(&#x27;退出登录&#x27;) modal.find(&#x27;.modal-body p&#x27;).text(&quot;是否确认退出登录？&quot;) modal.find(&#x27;.modal-footer a&#x27;).text(&quot;确认退出&quot;) modal.find(&#x27;.modal-footer a&#x27;).attr(&quot;href&quot;,&quot;&#123;% url &#x27;manager:logout&#x27; %&#125;&quot;)&#125;) 按钮的html只要设置了data-toggle=&quot;modal&quot; data-target=&quot;#mymodal&quot;就行，其中data-target是要弹出的模态框 1&lt;a class=&quot;nav-link&quot; href=&quot;/logout/&quot; role=&quot;button&quot; id=&quot;logoutbtn&quot; data-toggle=&quot;modal&quot; data-target=&quot;#mymodal&quot;&gt; jQuery表单校验 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/jquery-validation/jquery.validate.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/jquery-validation/additional-methods.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;script&gt;// ajax提交的时候要验证一下$(&quot;#createUserForm button[type=&#x27;submit&#x27;]&quot;).click(function(e)&#123; e.preventDefault(); // 阻止表单的默认提交行为 if (!$(&quot;#createUserForm&quot;).valid()) &#123; // 如果验证失败，返回false，不提交数据 return false; &#125;; var formData = $( &quot;#createUserForm&quot; ).serialize(); $.ajax(&#123; url: &quot;&#123;% url &#x27;manager:usercreate&#x27; %&#125;&quot;, // 你的请求地址 type: &quot;POST&quot;, // 请求类型，必须是POST data: formData, // 你的表单数据 dataType: &quot;json&quot;, // 返回的数据类型，必须是json success: function(data)&#123; if (data.result === 0) &#123; // 请求成功，显示消息 toastr.success(data.message) // window.location.href = &quot;&#123;% url &#x27;manager:userlist&#x27; %&#125;&quot;; setTimeout(function() &#123; window.location.href = &quot;&#123;% url &#x27;manager:userlist&#x27; %&#125;&quot;; &#125;, 1000); &#125; else if (data.result === 1) &#123; toastr.error(data.message) &#125; &#125;, error: function()&#123; // 请求失败的回调函数 console.log(&quot;Error&quot;); &#125; &#125;); &#125;);// 验证规则$.validator.addMethod(&quot;letterswithnumber&quot;, function(value,element) &#123; return this.optional(element) || /^(?=.*[a-z])(?=.*[0-9]).*$/i.test(value); &#125;, &quot;密码中必须包含字母、数字和特殊字符&quot;); $.validator.addMethod(&quot;specialchar&quot;, function(value,element) &#123; return this.optional(element) || /^(?=.*[!@#\\$%\\^&amp;\\*\\(\\)\\-_=+&#123;&#125;:\\,\\&lt;\\&gt;\\?]).*$/i.test(value); &#125;, &quot;密码中必须包含字母、数字和特殊字符&quot;); $(&#x27;#createUserForm&#x27;).validate(&#123; rules: &#123; email: &#123; required: false, email: true, &#125;, password: &#123; required: true, letterswithnumber: true, specialchar: true, minlength: 8 &#125;, confirmpassword: &#123; required: true, equalTo: &quot;#password&quot; &#125;, username: &#123; required: true, pattern: /^[a-zA-Z0-9]+$/, minlength: 5 &#125;, &#125;, messages: &#123; email: &#123; email: &quot;请输入正确的邮箱&quot; &#125;, password: &#123; required: &quot;请提供密码&quot;, etterswithnumber: &quot;密码中必须包含字母和数字&quot;, specialchar: &quot;密码中必须包含特殊字符&quot;, minlength: &quot;密码至少 8 个字符，至少包含三种符号&quot; &#125;, username: &#123; required: &quot;请输入用户名&quot;, minlength: &quot;用户名至少 5 个字符，仅允许字母和数字&quot; &#125;, confirmpassword: &#123; required: &quot;请提供确认密码&quot;, equalTo: &quot;确认密码与密码不一致&quot; &#125;, &#125;, errorElement: &#x27;span&#x27;, errorPlacement: function (error, element) &#123; error.addClass(&#x27;invalid-feedback&#x27;); element.closest(&#x27;.form-group&#x27;).append(error); &#125;, highlight: function (element, errorClass, validClass) &#123; $(element).addClass(&#x27;is-invalid&#x27;); &#125;, unhighlight: function (element, errorClass, validClass) &#123; $(element).removeClass(&#x27;is-invalid&#x27;); &#125; &#125;);&lt;/script&gt; 使用datatable html代码 123456789101112&lt;table id=&quot;usertable&quot; class=&quot;table table-bordered table-striped&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;用户名&lt;/th&gt; &lt;th&gt;创建时间&lt;/th&gt; &lt;th&gt;邮箱&lt;/th&gt; &lt;th&gt;手机号码&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;/table&gt; js代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556$(function () &#123; $(&#x27;#usertable&#x27;).DataTable(&#123; &quot;ajax&quot;: &quot;&#123;% url &#x27;manager:userlist&#x27; %&#125;&quot;, &quot;columns&quot;: [ &#123;&quot;data&quot;: &quot;username&quot;&#125;, &#123;&quot;data&quot;: &quot;create_time&quot;&#125;, &#123;&quot;data&quot;: &quot;email&quot;&#125;, &#123;&quot;data&quot;: &quot;phone&quot;&#125;, &#123;&quot;data&quot;: &quot;button&quot;&#125;, ], language: &#123;//自定义语言提示 &quot;processing&quot;: &quot;处理中...&quot;, &quot;lengthMenu&quot;: &quot;显示 _MENU_ 条用户数据&quot;, &quot;zeroRecords&quot;: &quot;没有找到相应的结果&quot;, &quot;info&quot;: &quot;第 _START_ 至 _END_ 行，共 _TOTAL_ 行&quot;, &quot;infoEmpty&quot;: &quot;第 0 至 0 项结果，共 0 项&quot;, &quot;infoFiltered&quot;: &quot;(由 _MAX_ 项结果过滤)&quot;, &quot;infoPostFix&quot;: &quot;&quot;, &quot;url&quot;: &quot;&quot;, &quot;thousands&quot;: &quot;&#x27;&quot;, &quot;emptyTable&quot;: &quot;表中数据为空&quot;, &quot;loadingRecords&quot;: &quot;载入中...&quot;, &quot;infoThousands&quot;: &quot;,&quot;, &quot;paginate&quot;: &#123; &quot;first&quot;: &quot;首页&quot;, &quot;previous&quot;: &quot;上页&quot;, &quot;next&quot;: &quot;下页&quot;, &quot;last&quot;: &quot;末页&quot; &#125; &#125;, &quot;sDom&quot;: &quot;&lt;&#x27;row&#x27;&lt;&#x27;col-md-6&#x27;&lt;&#x27;#toolbar&#x27;&gt;&gt;&lt;&#x27;col-md-6&#x27;f&gt;&gt;&quot; + //设置表格最上面内容，可以在这里添加按钮等其他设置 &quot;t&quot; + //设置tables &quot;&lt;&#x27;row&#x27;&lt;&#x27;col-md-5 sm-center&#x27;li&gt;&lt;&#x27;col-md-7 text-right sm-center&#x27;p&gt;&gt;&quot;,//设置表格最下面显示内容 buttons: [&#123; text: &#x27;&lt;i class=&quot;fa fa-download&quot; title=&quot;导出execl&quot;&gt;&lt;/i&gt;&#x27;, extend: &#x27;excel&#x27;, // 导出为execl title: &#x27;用户列表&#x27;+Date.now(), // 导出文件的名字 className: &#x27;btn btn-primary&#x27;, // 按钮样式 exportOptions:&#123; columns:[1,2,3,4], // 导出哪些列 // rows:[1,2,3,4] //导出哪些行 modifier: &#123; page: &#x27;all&#x27;, // 导出哪些页的数据，all为所有，current为当前页 &#125;, Headers: true,// 导出表格表头 footer: true,// 导出表格表尾 extension: &quot;.xlsx&quot;, // 导出的文件后缀 &#125; &#125;] &#125;); $(&quot;#toolbar&quot;).append(&#x27;&lt;a href=&quot;&#123;% url &quot;manager:usercreate&quot; %&#125;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;&lt;i class=&quot;fa fa-plus-square&quot;&gt;&lt;/i&gt;&amp;nbsp&amp;nbsp新建用户&lt;/button&gt;&lt;/a&gt;&#x27;) &#125;); 后端代码，返回的格式UserDict[“data”]，data要和js的columns data名称一致 12345678910111213141516171819202122232425262728293031323334353637383940def UserIndex(request): return render(request,&#x27;user/index.html&#x27;)class UserManager(View): def get(self,request): # if not request.META.get(&#x27;HTTP_X_REQUESTED_WITH&#x27;) == &#x27;XMLHttpRequest&#x27;: # return render(request,&#x27;user/index.html&#x27;) # print(&#x27;not ajax request&#x27;) UserInfo = UserDB.objects.all() # print(user) UserList = [] for User in UserInfo: username = User.username create_time =User.create_time email = User.email phone = User.phone button = &quot;&quot;&quot;&lt;div style=&quot;display: block;text-align: center;margin: auto;&quot;&gt; &lt;a class=&quot;btn btn-primary btn-sm&quot; href=&quot;&#123;0&#125;&quot;&gt; &lt;i class=&quot;fas fa-folder&quot;&gt; &lt;/i&gt; 详情 &lt;/a&gt; &lt;a class=&quot;btn btn-info btn-sm&quot; href=&quot;&#123;1&#125;&quot;&gt; &lt;i class=&quot;fas fa-pencil-alt&quot;&gt; &lt;/i&gt; 编辑 &lt;/a&gt; &lt;a class=&quot;btn btn-danger btn-sm&quot; data-url=&quot;&#123;2&#125;&quot; data-user=&#x27;&#123;3&#125;&#x27; data-toggle=&quot;modal&quot; data-target=&quot;#mymodal&quot;&gt; &lt;i class=&quot;fas fa-trash&quot;&gt; &lt;/i&gt; 删除 &lt;/a&gt; &lt;/div&gt; &quot;&quot;&quot;.format(reverse(&#x27;manager:userdetail&#x27;,kwargs=&#123;&#x27;uid&#x27;:User.uid&#125;),reverse(&#x27;manager:useredit&#x27;,kwargs=&#123;&#x27;uid&#x27;:User.uid&#125;),reverse(&#x27;manager:userdel&#x27;,kwargs=&#123;&#x27;uid&#x27;:User.uid&#125;),User.username) UserList.append(&#123;&#x27;username&#x27;: User.username,&#x27;create_time&#x27;:User.create_time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;),&#x27;email&#x27;:User.email,&#x27;phone&#x27;: User.phone,&#x27;uid&#x27;:str(User.uid),&#x27;button&#x27;:button&#125;) print(username) UserDict = &#123;&#125; UserDict[&quot;data&quot;] = UserList return HttpResponse(json.dumps(UserDict)) urls.py 12path(&#x27;user/&#x27;,views.UserIndex,name=&#x27;userindex&#x27;),path(&#x27;user/list/&#x27;,views.UserManager.as_view(),name=&#x27;userlist&#x27;), 刷新datatable的数据 1$(&#x27;#usertable&#x27;).DataTable().ajax.reload(); 截断datatable数据 使用DataTables提供的ellipsis插件，它专门用于文本的截断显示。这个插件可以对过长的文本进行截断，并在结尾添加省略号。使用这个插件非常简单，首先需要在HTML中引入相应的JS文件： 1&lt;script src=&quot;https://cdn.datatables.net/plug-ins/1.11.3/dataRender/ellipsis.js&quot;&gt;&lt;/script&gt; 然后在DataTables的配置中使用render.ellipsis方法： 1234567891011121314$(&#x27;#example&#x27;).DataTable(&#123; // 其他配置 &quot;columnDefs&quot;: [ &#123; &quot;targets&quot;: [ 0 ], &quot;render&quot;: $.fn.dataTable.render.ellipsis( 40 ) // 截断长度为40个字符 &#125; ]&#125;);```js## datatables默认排序```js&quot;order&quot;: [[ 1, &quot;desc&quot; ]] bootstrap-switch监听按钮变化事件 12345$(&quot;#userstat_value&quot;).on(&#x27;switchChange.bootstrapSwitch&#x27;, function (event,state) &#123; var status = this.checked ? &#x27;True&#x27; : &#x27;False&#x27;; console.log(&#x27;userstat&#x27;+status) $(&#x27;input[name=&quot;userstat&quot;]&#x27;).val(status); &#125;); 文件上传 html 123456789&lt;!-- 不在form表单中 --&gt;&lt;div class=&quot;card-body&quot; style=&quot;display: block;&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;logoimg&quot;&gt;站点图标(33x33)&lt;/label&gt; &lt;div class=&quot;file-loading&quot;&gt; &lt;input id=&quot;logoimg&quot; name=&quot;logoimg&quot; type=&quot;file&quot;&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; js文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;script src=&quot;&#123;% static &#x27;adminlte/plugins/bs-custom-file-input/bs-custom-file-input.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;!-- bootstrap 5.x or 4.x is supported. You can also use the bootstrap css 3.3.x versions --&gt;&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css&quot; crossorigin=&quot;anonymous&quot;&gt; --&gt;&lt;!-- default icons used in the plugin are from Bootstrap 5.x icon library (which can be enabled by loading CSS below) --&gt;&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.min.css&quot; crossorigin=&quot;anonymous&quot;&gt; --&gt;&lt;!-- alternatively you can use the font awesome icon library if using with `fas` theme (or Bootstrap 4.x) by uncommenting below. --&gt;&lt;!-- link rel=&quot;stylesheet&quot; href=&quot;https://use.fontawesome.com/releases/v5.15.4/css/all.css&quot; crossorigin=&quot;anonymous&quot; --&gt;&lt;!-- the fileinput plugin styling CSS file --&gt;&lt;link href=&quot;https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.2/css/fileinput.min.css&quot; media=&quot;all&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&lt;!-- if using RTL (Right-To-Left) orientation, load the RTL CSS file after fileinput.css by uncommenting below --&gt;&lt;!-- link href=&quot;https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.2/css/fileinput-rtl.min.css&quot; media=&quot;all&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /--&gt;&lt;!-- the jQuery Library --&gt;&lt;!-- &lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; --&gt;&lt;!-- buffer.min.js and filetype.min.js are necessary in the order listed for advanced mime type parsing and more correct preview. This is a feature available since v5.5.0 and is needed if you want to ensure file mime type is parsed correctly even if the local file&#x27;s extension is named incorrectly. This will ensure more correct preview of the selected file (note: this will involve a small processing overhead in scanning of file contents locally). If you do not load these scripts then the mime type parsing will largely be derived using the extension in the filename and some basic file content parsing signatures. --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.2/js/plugins/buffer.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.2/js/plugins/filetype.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;!-- piexif.min.js is needed for auto orienting image files OR when restoring exif data in resized images and when you wish to resize images before upload. This must be loaded before fileinput.min.js --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.2/js/plugins/piexif.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;!-- sortable.min.js is only needed if you wish to sort / rearrange files in initial preview. This must be loaded before fileinput.min.js --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.2/js/plugins/sortable.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;!-- bootstrap.bundle.min.js below is needed if you wish to zoom and preview file content in a detail modal dialog. bootstrap 5.x or 4.x is supported. You can also use the bootstrap js 3.3.x versions. --&gt;&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; --&gt;&lt;!-- the main fileinput plugin script JS file --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.2/js/fileinput.min.js&quot;&gt;&lt;/script&gt;&lt;!-- following theme script is needed to use the Font Awesome 5.x theme (`fas`). Uncomment if needed. --&gt;&lt;!-- script src=&quot;https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.2/themes/fas/theme.min.js&quot;&gt;&lt;/script --&gt;&lt;!-- optionally if you need translation for your language then include the locale file as mentioned below (replace LANG.js with your language locale) --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.2/js/locales/LANG.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(&quot;#logoimg&quot;).fileinput(&#123; showUpload: true, //显示上传按钮 dropZoneEnabled: false, maxFileCount: 1, //最大选择的文件数 inputGroupClass: &quot;input-group-lg&quot;, allowedFileExtensions: [&quot;png&quot;], // 允许的文件扩展名 language: &#x27;zh&#x27;, uploadUrl: &quot;&#123;% url &#x27;manager:system&#x27; %&#125;&quot;, // 上传的URL &#125;).on(&quot;fileuploaded&quot;, function (e,data,previewId,index) &#123; // 上传成功后触发的事件 toastr.success(&#x27;修改站点图标成功,当前界面可能有缓存,如未更新,请强制刷新一次&#x27;) setTimeout(function() &#123; location.reload(); &#125;, 3000); &#125;); ace编辑器 引入 12&lt;!-- 地址 --&gt;https://cdnjs.cloudflare.com/ajax/libs/ace/1.32.3/ace.min.js 使用 123456789 &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;password&quot;&gt;&lt;a style=&quot;color: red;&quot;&gt;&lt;/a&gt;IP地址（选择黑/白名单时需配置，每行一个IP或网段，如1.1.1.1 或者 1.1.1.0/24）&lt;/label&gt; &lt;div class=&quot;col-md-12&quot;&gt; &lt;textarea class=&quot;form-control&quot; id=&quot;form_content&quot; name=&quot;content&quot; rows=&quot;5&quot;&gt;&lt;/textarea&gt; &lt;pre id=&quot;content&quot; style=&quot;height:415px&quot;&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt;&lt;script src=&quot;&#123;% static &#x27;ace/ace.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt; 12345678910// ACE配置 var editor = ace.edit(&quot;content&quot;); var textarea = $(&#x27;textarea[name=&quot;content&quot;]&#x27;).hide(); editor.getSession().on(&#x27;change&#x27;, function()&#123; textarea.val(editor.getSession().getValue()); &#125;); editor.setShowPrintMargin(false); // 字体大小 editor.setFontSize(18); editor.resize() js换行 12var multiLineString = `这是第一行这是第二行`;","tags":[{"name":"django","slug":"django","permalink":"https://www.51yunwei.top/tags/django/"},{"name":"adminlte","slug":"adminlte","permalink":"https://www.51yunwei.top/tags/adminlte/"}],"categories":[{"name":"django","slug":"django","permalink":"https://www.51yunwei.top/categories/django/"}]},{"title":"测试图片","date":"2023-12-30T04:42:20.000Z","path":"posts/undefined/","text":"","tags":[],"categories":[{"name":"博客测试","slug":"博客测试","permalink":"https://www.51yunwei.top/categories/%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/"}]},{"title":"Hello World","date":"2023-12-30T03:31:33.884Z","path":"posts/undefined/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","tags":[],"categories":[{"name":"博客测试","slug":"博客测试","permalink":"https://www.51yunwei.top/categories/%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/"}]},{"title":"Github Page + Hexo 搭建个人博客问题小记","date":"2023-12-28T01:08:08.000Z","path":"posts/undefined/","text":"在使用Github Page + Hexo搭建个人博客的时候遇到了一些问题，现记录如下，主题使用的是cactus 问题1 hexo-deployer-git 提示输入用户名/密码 在deploy中配置了token后，使用hexo g -d部署到Github，提示输入用户名密码，但是现在Github已经不支持命令行使用用户名密码登录了，所以需要改为SSH的方式，将deploy的token去掉，repo配置为git@github.com/用户名/仓库名在Github仓库下，选择Settings &gt; Deploy keys &gt;添加一个Deploy key，将系统的~/.ssh/xxxx.pub文件的内容布置上去，然后在GitHub界面勾选Allow write access即可。 问题2 部署hexo后用自定义域名访问显示404，使用用户名.github.io访问正常 方法1 这是因为部署hexo后，原来的CNAME文件被清除了，需要重新设置一下自定义域名。然后在hexo的public文件夹下，新建一个CNAME文件，内容为自定义的域名。如果不写这个文件的话，后面使用hexo g -d，有得重新设置一下自定义域名了。 12cat public/CNAMEwww.51yunwei.top 方法2 一劳永逸的方法，在_config.yml中设置url和插件 12345# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: https://www.51yunwei.topPlugins:- hexo-generator-cname 安装插件 1npm install hexo-generator-cname 问题3 修改cactus主题样式不生效 按照官方文档修改了_config.yml文件中的colorscheme参数不生效，需要重新执行以下命令，执行完之后自定义域名又不能访问了，按照问题1进行处理。 只要修改了配置文件，都要执行以下命令生成新的新的静态文件 1hexo clean &amp;&amp; hexo deploy 问题4 如何为每篇文章添加文字/图片？ 可以在主题下的layout/post.ejs中添加，把需要添加的内容放在&lt;%- page.content %&gt;后面，如： 12&lt;%- page.content %&gt; &lt;p style=&quot;text-align: center;&quot;&gt; 感谢浏览，如对您有帮助或需联系我，欢迎关注我的微信公众号~&lt;/p&gt;","tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://www.51yunwei.top/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://www.51yunwei.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"测试文章","date":"2023-12-27T08:58:43.000Z","path":"posts/undefined/","text":"Test PageFrom 2023 Test PageForm Gzhou 图片测试 Django学习 https://zhuanlan.zhihu.com/p/113447102 simpleui官网 https://newpanjing.github.io/simpleui_docs/","tags":[],"categories":[{"name":"博客测试","slug":"博客测试","permalink":"https://www.51yunwei.top/categories/%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/"}]}],"categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://www.51yunwei.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"前端学习","slug":"前端学习","permalink":"https://www.51yunwei.top/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"},{"name":"前端","slug":"前端","permalink":"https://www.51yunwei.top/categories/%E5%89%8D%E7%AB%AF/"},{"name":"django","slug":"django","permalink":"https://www.51yunwei.top/categories/django/"},{"name":"Linux系统","slug":"Linux系统","permalink":"https://www.51yunwei.top/categories/Linux%E7%B3%BB%E7%BB%9F/"},{"name":"博客测试","slug":"博客测试","permalink":"https://www.51yunwei.top/categories/%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.51yunwei.top/tags/hexo/"},{"name":"adminlte","slug":"adminlte","permalink":"https://www.51yunwei.top/tags/adminlte/"},{"name":"django","slug":"django","permalink":"https://www.51yunwei.top/tags/django/"},{"name":"Linux","slug":"Linux","permalink":"https://www.51yunwei.top/tags/Linux/"},{"name":"博客搭建","slug":"博客搭建","permalink":"https://www.51yunwei.top/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]}